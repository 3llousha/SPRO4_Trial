-- DSP Module
-- If Mode_Sel = 1, Based on f_sel respective frequencies are modulated
-- Tried Optimize by having buffers for large data input and shift registers to handle feedforward and feedback

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity DSPModule is
    Port (
        clk        : in std_logic;            -- Clock
        rst        : in std_logic;            -- Reset
        audio_in   : in signed(23 downto 0);  -- Input audio  
        f_sel      : in integer range 1 to 8; -- variable for choosing which band to apply
        fgain_lvl  : in integer range -24 to 24; -- Gain Adjustment, from -24dB to +24dB range
        audio_out  : out signed(23 downto 0)  -- Output audio signal after filtering
    );
end DSPModule;

architecture Behavioral of DSPModule is
    type coeff_array is array (1 to 3) of real; 
    type audio_array is array (0 to 2) of signed(23 downto 0); -- 24-bit audio

    -- Coefficients for Butterworth filters at specified frequencies, calculated using MATLAB
    type b_coeffs_type is array (1 to 8) of coeff_array;
    constant b_coeffs: b_coeffs_type := (
        (0.000017, 0.000035, 0.000017),  -- Coefficients for 64 Hz
        (0.000066, 0.000132, 0.000066),  -- Coefficients for 125 Hz
        (0.000262, 0.000523, 0.000262),  -- Coefficients for 250 Hz
        (0.001023, 0.002046, 0.001023),  -- Coefficients for 500 Hz
        (0.003916, 0.007832, 0.003916),  -- Coefficients for 1000 Hz
        (0.014401, 0.028803, 0.014401),  -- Coefficients for 2000 Hz
        (0.049490, 0.098980, 0.049490),  -- Coefficients for 4000 Hz
        (0.465153, 0.930306, 0.465153)   -- Coefficients for 16000 Hz
    );

    type a_coeffs_type is array (1 to 8) of coeff_array;
    constant a_coeffs : a_coeffs_type := (
        (1.0, -1.988152, 0.988222), -- Coefficients for 64 Hz
        (1.0, -1.976861, 0.977126), -- Coefficients for 125 Hz
        (1.0, -1.953728, 0.954775), -- Coefficients for 250 Hz
        (1.0, -1.907502, 0.911594), -- Coefficients for 500 Hz
        (1.0, -1.815341, 0.831006), -- Coefficients for 1000 Hz
        (1.0, -1.632993, 0.690599), -- Coefficients for 2000 Hz
        (1.0, -1.279632, 0.477592), -- Coefficients for 4000 Hz
        (1.0, -0.620204, 0.240408)  -- Coefficients for 16000 Hz
    );

    -- Internal signals to store the history of input and output audio samples
    signal x_hist, y_hist : audio_array;  -- x_hist stores input audio samples, y_hist stores output audio samples

    -- Filter output signal
    signal filter_output : signed(23 downto 0); -- 24-bit filtered audio out

begin
    -- Filter process, relates to clock and reset
    filter_processing : process(clk, rst)
        variable yn : real;  -- Variable to compute the new output (y) sample based on filter (n)
    begin
        if rst = '1' then  -- Reset history when reset is high
            x_hist <= (others => (others => '0'));
            y_hist <= (others => (others => '0'));
            filter_output <= (others => '0');

        elsif rising_edge(clk) then  -- Updates history on the rising edge, shifts older audio samples to make room for the new ones
            x_hist(2) <= x_hist(1); x_hist(1) <= x_hist(0); x_hist(0) <= audio_in;
            y_hist(2) <= y_hist(1); y_hist(1) <= y_hist(0);

            -- Compute new output using the current and past inputs and outputs
            yn := b_coeffs(f_sel)(1) * real(to_integer(x_hist(0))) +
                  b_coeffs(f_sel)(2) * real(to_integer(x_hist(1))) +
                  b_coeffs(f_sel)(3) * real(to_integer(x_hist(2))) -
                  a_coeffs(f_sel)(2) * real(to_integer(y_hist(1))) -
                  a_coeffs(f_sel)(3) * real(to_integer(y_hist(2)));

            -- Apply gain control to the output
            y_hist(0) <= to_signed(integer(yn * (1.0 + real(fgain_lvl) / 100.0)), 24);
            filter_output <= y_hist(0);
        end if;
    end process;

    -- Output the processed audio signal
    audio_out <= filter_output;
end Behavioral;


-- Hex Coeff
    type b_coeffs_type is array (1 to 8) of coeff_array;
    constant b_coeffs: b_coeffs_type := (
        (16#38C8_5C28#, 16#3C56_5A9E#, 16#38C8_5C28#),  -- Coefficients for 64 Hz
        (16#3A83_8E38#, 16#3C96_71C4#, 16#3A83_8E38#),  -- Coefficients for 125 Hz
        (16#3C86_771A#, 16#3D86_771A#, 16#3C86_771A#),  -- Coefficients for 250 Hz
        (16#3E01_5030#, 16#3F01_5030#, 16#3E01_5030#),  -- Coefficients for 500 Hz
        (16#3F1E_41D7#, 16#3F81_D7A3#, 16#3F1E_41D7#),  -- Coefficients for 1000 Hz
        (16#3F95_B03D#, 16#3FC5_B03D#, 16#3F95_B03D#),  -- Coefficients for 2000 Hz
        (16#3FBA_92B0#, 16#3FDA_92B0#, 16#3FBA_92B0#),  -- Coefficients for 4000 Hz
        (16#3FE0_84F9#, 16#3FE0_84F9#, 16#3FE0_84F9#)   -- Coefficients for 16000 Hz
    );


    type a_coeffs_type is array (1 to 8) of coeff_array;
    constant a_coeffs : a_coeffs_type := (
        (16#3F80_0000#, 16#BF7C_9F91#, 16#3F7C_A3D7#), -- Coefficients for 64 Hz
        (16#3F80_0000#, 16#BF7C_45B5#, 16#3F7C_EE5E#), -- Coefficients for 125 Hz
        (16#3F80_0000#, 16#BF76_D646#, 16#3F76_F3DC#), -- Coefficients for 250 Hz
        (16#3F80_0000#, 16#BF61_93E4#, 16#3F69_4A40#), -- Coefficients for 500 Hz
        (16#3F80_0000#, 16#BF3C_63F6#, 16#3F56_BF91#), -- Coefficients for 1000 Hz
        (16#3F80_0000#, 16#BF12_0040#, 16#3F34_1EB8#), -- Coefficients for 2000 Hz
        (16#3F80_0000#, 16#BEA3_19B0#, 16#3EF4_2C26#), -- Coefficients for 4000 Hz
        (16#3F80_0000#, 16#BD97_821A#, 16#3E3D_1B6C#)  -- Coefficients for 16000 Hz
    );



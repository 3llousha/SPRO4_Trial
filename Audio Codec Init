//Programmed in C USing SDK and IP Blocks
#include "xiicps.h"    // Include the I2C driver header file
#include "xil_io.h"    // Include the Xilinx I/O library header file
#include "xparameters.h" // Include the header file with system parameters (addresses and device IDs)

// Define constants for I2C communication
#define IIC_SCLK_RATE 100000       // Set the I2C clock rate to 100 kHz
#define ADAU1761_IIC_ADDR 0x38     // Define the I2C address of the ADAU1761 codec

// Declare an instance of the I2C driver
XIicPs Iic;

// Function to write a value to a register in the ADAU1761 codec
// addr: 16-bit register address in the ADAU1761
// value: 8-bit value to write to the register
void ADAU1761_WriteRegister(u16 addr, u8 value) {
    u8 buffer[3]; // Buffer to hold the data to be sent over I2C
    
    // Populate the buffer with the register address and value
    buffer[0] = (addr >> 8) & 0xFF; // High byte of the register address
    buffer[1] = addr & 0xFF;        // Low byte of the register address
    buffer[2] = value;              // Value to write to the register
    
    // Send the buffer to the ADAU1761 over I2C
    XIicPs_MasterSendPolled(&Iic, buffer, 3, ADAU1761_IIC_ADDR);
    
    // Wait until the I2C bus is no longer busy
    while (XIicPs_BusIsBusy(&Iic));
}

// Function to initialize the ADAU1761 codec
void ADAU1761_Init() {
    // Reset the codec by writing to the reset register
    ADAU1761_WriteRegister(0x4000, 0x00); // Clear the reset bit
    ADAU1761_WriteRegister(0x4000, 0x01); // Set the reset bit
    
    // Configure the codec PLL (Phase-Locked Loop), clocks, and other settings
    // This is an example to set the sampling rate to 48 kHz
    ADAU1761_WriteRegister(0x4002, 0x0A); // This specific register setting is an example
    
    // Additional initialization code should be added here based on the datasheet
    // and your specific requirements (e.g., configure input/output paths, gain, etc.)
}

int main() {
    // Lookup the configuration information for the I2C device
    XIicPs_Config *Config = XIicPs_LookupConfig(XPAR_XIICPS_0_DEVICE_ID);
    
    // Initialize the I2C driver with the configuration information
    XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
    
    // Set the I2C clock rate
    XIicPs_SetSClk(&Iic, IIC_SCLK_RATE);

    // Initialize the ADAU1761 codec
    ADAU1761_Init();

    // Main processing loop
    while (1) {
        // Your DSP (Digital Signal Processing) code will go here
        // This could include reading audio data, processing it, and outputting it
    }

    return 0; // Return 0 to indicate the program completed successfully
}

// C code Translated in VHDL
    //Entity Declaration: Defines the inputs and outputs for the ADAU1761 initialization module.
    //Architecture
    //Signals: Signals for I2C communication and state machine.
    //Instantiation of I2C Master: Connects the I2C master module.
    //State Transition Process: Handles state transitions based on the current state and inputs.
    //Next State Logic Process: Determines the next state and sends commands to the I2C master for resetting and configuring the ADAU1761 codec.

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

-- Entity declaration for the Codec initialization
entity adau1761_init is
    Port (
        clk       : in  std_logic;  -- System clock
        reset     : in  std_logic;  -- System reset
        init_done : out std_logic;  -- Initialization complete signal
        sda       : inout std_logic; -- I2C data line
        scl       : out std_logic   -- I2C clock line
    );
end adau1761_init;

-- Architecture definition for the ADAU1761 initialization
architecture Behavioral of adau1761_init is

    -- Signals for I2C master communication
    signal start   : std_logic;
    signal addr    : std_logic_vector(15 downto 0);
    signal data    : std_logic_vector(7 downto 0);
    signal done    : std_logic;

    -- Initialization sequence states
    type state_type is (IDLE, RESET1, RESET2, CONFIG1, DONE);
    signal state, next_state : state_type;

begin

    -- Instantiate the I2C master
    i2c_master_inst : entity work.i2c_master
        port map (
            clk => clk,
            reset => reset,
            start => start,
            addr => addr,
            data => data,
            done => done,
            sda => sda,
            scl => scl
        );

    -- State transition process
    process(clk, reset)
    begin
        if reset = '1' then
            state <= IDLE;
        elsif rising_edge(clk) then
            state <= next_state;
        end if;
    end process;

    -- Next state logic process
    process(state, done)
    begin
        -- Default assignments
        start <= '0';
        next_state <= state;

        case state is
            when IDLE =>
                -- Transition to RESET1 state
                next_state <= RESET1;

            when RESET1 =>
                -- Send first reset command
                addr <= x"4000";
                data <= x"00";
                start <= '1';
                if done = '1' then
                    next_state <= RESET2;
                end if;

            when RESET2 =>
                -- Send second reset command
                addr <= x"4000";
                data <= x"01";
                start <= '1';
                if done = '1' then
                    next_state <= CONFIG1;
                end if;

            when CONFIG1 =>
                -- Send configuration command
                addr <= x"4002";
                data <= x"0A";
                start <= '1';
                if done = '1' then
                    next_state <= DONE;
                end if;

            when DONE =>
                -- Set initialization complete signal
                init_done <= '1';

            when others =>
                -- Default state: idle
                next_state <= IDLE;
        end case;
    end process;

end Behavioral;



// VHDL Code
// creates a clock at 1/2 the projects 48MHz to send to the codec.

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ADAU1761_interface is
    Port ( clk_48 : in  STD_LOGIC;
           codec_master_clk : out  STD_LOGIC);
end ADAU1761_interface;

architecture Behavioral of ADAU1761_interface is
   signal master_clk : std_logic := '0';
begin
   codec_master_clk <= master_clk;
   
process(clk_48)
   begin
      if rising_edge(clk_48) then
         master_clk <= not master_clk;
      end if;
   end process;
end Behavioral;







